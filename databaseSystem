CREATE TABLE users (
  username VARCHAR(255) PRIMARY KEY NOT NULL,
  password VARCHAR(255) NOT NULL,
  pfp VARCHAR(200) NOT NULL
);

CREATE TABLE posts (
  id VARCHAR(255) PRIMARY KEY,
  score INTEGER NOT NULL DEFAULT 0,
  community_name VARCHAR(64) NULL,
  author_username VARCHAR(255) NOT NULL,
  header TEXT,
  content TEXT,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (author_username) REFERENCES users(username),
  FOREIGN KEY (community_name) REFERENCES communities(name)
);

CREATE TABLE post_interactions (
  username VARCHAR(255) NOT NULL,
  interaction_type TINYINT NOT NULL,
  post_id VARCHAR(255) NOT NULL,
  PRIMARY KEY (username, post_id),
  FOREIGN KEY (username) REFERENCES users(username),
  FOREIGN KEY (post_id) REFERENCES posts(id)
);

CREATE TABLE post_comments (
  id VARCHAR(255) PRIMARY KEY,
  username VARCHAR(255) NOT NULL,
  post_id VARCHAR(255) NOT NULL,
  parent_comment_id VARCHAR(255) NULL,
  comment TEXT NOT NULL,
  timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (username) REFERENCES users(username),
  FOREIGN KEY (post_id) REFERENCES posts(id),
  FOREIGN KEY(parent_comment_id) REFERENCES post_comments(id)
);

CREATE TABLE comment_interactions (
  username VARCHAR(255) NOT NULL,
  interaction_type TINYINT NOT NULL,
  comment_id VARCHAR(255) NOT NULL,
  PRIMARY KEY (username, comment_id),
  FOREIGN KEY (username) REFERENCES users(username),
  FOREIGN KEY (comment_id) REFERENCES post_comments(id)
);

CREATE TABLE post_images (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  post_id INTEGER NOT NULL,
  image VARCHAR(200) NOT NULL,
  FOREIGN KEY (post_id) REFERENCES posts(id)
);

CREATE TABLE communities (
  name VARCHAR(64) PRIMARY KEY NOT NULL,
  description TEXT,
  community_leader_username VARCHAR(255) NOT NULL
);

CREATE TABLE user_communities (
  user_username VARCHAR(255) NOT NULL,
  user_karma INTEGER NOT NULL,
  community_name VARCHAR(64) NOT NULL,
  FOREIGN KEY (user_username) REFERENCES users(username),
  PRIMARY KEY (user_username, community_name)
);

CREATE TABLE user_followers (
  user_username VARCHAR(255) NOT NULL,
  follower_username VARCHAR(255) NOT NULL,
  FOREIGN KEY (user_username) REFERENCES users(username),
  FOREIGN KEY (follower_username) REFERENCES users(username),
  PRIMARY KEY(user_username, follower_username)
);